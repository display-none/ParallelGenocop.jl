@everywhere using ParallelGenocop
@everywhere @Logging.configure(level=INFO)


function test()
###
println("qiulp - meszaros lib")


@everywhere begin

function loosen_it(plus_minus, parameter, vector)
	result = similar(vector)
	for i=1:length(vector)
		if abs(vector[i]) < 1
			result[i] = plus_minus(vector[i], parameter)
		else
			result[i] = plus_minus(vector[i], abs(vector[i])*parameter)
		end
	end
	return result
end

blas_set_num_threads(16)

lower_bounds = Float64[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
upper_bounds = Float64[1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf]

equalities = readdlm("qiulp_eq", Float64)
equalities_right = Float64[.26,2.73,3.77,.26,.52,4.16,.52,2.34,22.23,3.64,.26,.26,2.73,.26,.52,.26,.26,3.38,.26,1.82,.26,.26,.26,3.38,.26,1.82,.26,.26,2.73,3.51,.26,3.9,19.370001,2.73,3.38,3.38,.26,.52,4.94,1.04,7.28,.26,.26,.52,4.42,.26,.26,3.51,.26,1.3,.26,.26,.26,3.51,.52,.26,.26,3.12,.26,.78,.26,.26,.26,3.12,.52,.26,.26,2.73,3.77,.26,.52,4.16,.52,2.34,22.23,3.64,.26,.26,2.73,.26,.52,.26,.26,3.38,.26,1.82,.26,.26,.26,3.38,.26,1.82,.26,.26,2.73,3.51,.26,3.9,19.370001,2.73,3.38,3.38,.26,.52,4.94,1.04,7.28,.26,.26,.52,4.42,.26,.26,3.51,.26,1.3,.26,.26,.26,3.51,.52,.26,.26,3.12,.26,.78,.26,.26,.26,3.12,.52,.26]

inequalities = readdlm("qiulp_ineq", Float64)
inequalities_right = Float64[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48.,48.,48.,48.,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

param = 1e-4
lower_bounds = loosen_it(-, param, lower_bounds)
upper_bounds = loosen_it(+, param, upper_bounds)
inequalities_right = loosen_it(+, param, inequalities_right)

starting_point = Float64[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0, 0.26, 0, 0, 0, 0, 0, 0, 0, 0, 3.77, 0, 0, 0, 0, 0, 0, 0.52, 0, 0, 4.16, 0, 0, 0, 0, 0, 0, 0, 0, 2.34, 0, 0, 0, 0, 16.22, 0, 0, 3.64, 0, 0, 0.26, 0, 0, 0, 0.26, 0, 0, 0, 0, 0, 1.63, 0, 0, 0, 0, 0, 0.52, 0, 0, 0, 0, 0.26, 0, 0, 0, 0, 0.26, 0, 0, 3.38, 0, 0, 0, 0, 0, 0, 0, 1.82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.26, 0, 0, 0, 0, 3.38, 0, 0, 0, 0, 0, 0, 1.82, 0, 0, 0, 0.26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.26, 0, 0, 3.9, 0, 0, 0, 1e-06, 0, 0, 0, 2.73, 0, 0, 0, 3.38, 0, 0, 0, 0, 0, 3.38, 0, 0, 0, 0, 0, 0, 0.52, 0, 0, 0, 4.94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.26, 0, 0, 0, 0, 0, 0, 0, 0.52, 0, 0, 0, 4.42, 0, 0, 0, 0, 0, 0, 0, 0.26, 0, 0, 0, 3.51, 0, 0, 0, 0, 0, 0, 0, 1.3, 0, 0, 0, 0.26, 0, 0, 0, 0, 0, 0, 0, 0.26, 0, 0, 0, 0, 0, 0, 0, 0.100001, 0, 0, 0, 0.26, 0, 0, 0, 0, 0, 0, 0, 3.12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.26, 0, 0, 0, 0.26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.52, 0, 0, 0, 0, 0, 0, 0, 0, 0.26, 0, 0, 0, 2.73, 0, 0, 0, 0, 3.77, 0, 0, 0.26, 0, 0, 0, 0.52, 0, 0, 4.16, 0, 0, 0, 0, 0.52, 0, 0, 0, 2.34, 0, 0, 0, 0, 22.23, 0, 0, 3.64, 0, 0, 0.26, 0, 0, 0, 0.26, 0, 0, 0, 0, 0, 2.73, 0, 0, 0.26, 0, 0, 0.52, 0, 0, 0, 0, 0.26, 0, 0, 0, 0, 0.26, 0, 0, 3.38, 0, 0, 0, 0.26, 0, 0, 0, 1.82, 0, 0, 0, 0, 0.26, 0, 0, 0.26, 0, 0, 0.26, 0, 0, 0, 0, 3.38, 0, 0, 0, 0, 0.26, 0, 1.82, 0, 0, 0, 0.26, 0, 0, 0, 0, 0, 0.26, 0, 0, 0, 2.73, 0, 0, 0, 3.51, 0, 0, 0.26, 0, 0, 3.9, 0, 0, 0, 1e-06, 0, 0, 19.37, 2.73, 0, 0, 0, 3.38, 0, 0, 0, 0, 0, 3.38, 0, 0, 0, 0, 0.26, 0, 0.52, 0, 0, 0, 4.94, 0, 0, 0, 1.04, 0, 0, 0, 7.28, 0, 0, 0.26, 0, 0, 0, 0, 0.26, 0, 0, 0.52, 0, 0, 0, 4.42, 0, 0, 0, 0, 0, 0, 0.26, 0.26, 0, 0, 0, 3.51, 0, 0, 0, 0, 0.26, 0, 0, 1.3, 0, 0, 0, 0.26, 0, 0, 0, 0, 0, 0.26, 0, 0.26, 0, 0, 0, 0, 0, 3.51, 0, 0.100001, 0, 0, 0.419999, 0.26, 0, 0, 0, 0, 0, 0, 0.26, 3.12, 0, 0, 0, 0, 0, 0.26, 0, 0, 0.78, 0, 0, 0.26, 0, 0, 0, 0.26, 0, 0, 0, 0, 0, 0, 0.26, 0, 3.12, 0, 0, 0.52, 0, 0, 0, 0.26, 0, 0, 0, 0, 0.26, 0, 0, 0, 0, 2.73, 0, 0, 0, 3.77, 0, 0, 0, 0.26, 0, 0, 0.52, 0, 0, 4.16, 0, 0, 0, 0, 0, 0.52, 0, 0, 2.34, 0, 0, 0, 6.01, 16.22, 0, 0, 3.64, 0, 0, 0.26, 0, 0, 0, 0.26, 0, 0, 0, 1.1, 0, 1.63, 0, 0.26, 0, 0, 0, 0.52, 0, 0, 0, 0, 0.26, 0, 0, 0, 0, 0.26, 0, 0, 3.38, 0, 0, 0, 0, 0.26, 0, 0, 1.82, 0, 0, 0.23, 0, 0.03, 0, 0, 0, 0, 0.26, 0.26, 0, 0, 0, 0, 3.38, 0, 0, 0, 0, 0, 0.26, 1.82, 0, 0, 0, 0.26, 0, 0, 0, 0.26, 0, 0, 0, 2.73, 0, 0, 0, 3.51, 0, 0, 0, 0, 0.26, 0, 0, 3.9, 0, 0, 0, 0, 0, 0, 19.370001, 2.73, 0, 0, 0, 3.38, 0, 0, 0, 0, 0, 3.38, 0, 0, 0.26, 0, 0, 0, 0.52, 0, 0, 0, 4.94, 0, 0, 1.04, 0, 0, 0, 0, 0, 0, 7.28, 0.26, 0, 0, 0, 0.26, 0, 0, 0, 0.52, 0, 0, 0, 4.42, 0, 0, 0, 0, 0, 0.26, 0, 0.26, 0, 0, 0, 3.51, 0, 0, 0, 0, 0.26, 0, 0, 1.3, 0, 0, 0, 0.26, 0, 0, 0, 0.26, 0, 0, 0, 0.26, 0, 0, 0, 3.51, 0, 0, 0, 0.52, 0, 0, 0, 0.26, 0, 0, 0, 0.26, 0, 0, 0, 3.12, 0, 0, 0, 0.26, 0, 0, 0, 0.78, 0, 0, 0, 0.26, 0, 0, 0, 0.26, 0, 0, 0, 0, 0, 0.26, 0, 0, 3.12, 0, 0, 0.52, 0, 0, 0, 0, 0, 0.26, 0]

eval_func = function(X::Vector{Float64})
                return 114.034*X[1]+114.034*X[2]+114.034*X[3]+114.034*X[4]+114.034*X[5]+114.034*X[6]+114.034*X[7]+114.034*X[8]+114.034*X[9]+114.034*X[10]+114.034*X[11]+114.034*X[12]+114.034*X[13]+114.034*X[14]+114.034*X[15]+114.034*X[16]+114.034*X[17]+114.034*X[18]+114.034*X[19]+114.034*X[20]+114.034*X[21]+114.034*X[22]+114.034*X[23]+114.034*X[24]+114.034*X[25]+114.034*X[26]+114.034*X[27]+114.034*X[28]+114.034*X[29]+114.034*X[30]+114.034*X[31]+114.034*X[32]+114.034*X[33]+114.034*X[34]+114.034*X[35]+114.034*X[36]+114.034*X[37]+114.034*X[38]+114.034*X[39]+114.034*X[40]+114.034*X[41]+114.034*X[42]+114.034*X[43]+114.034*X[44]+114.034*X[45]+114.034*X[46]+114.034*X[47]+114.034*X[48]-16.947*X[49]-16.947*X[50]-16.947*X[51]-16.947*X[52]-16.947*X[53]-16.947*X[54]-16.947*X[55]-16.947*X[56]-16.947*X[57]-16.947*X[58]-16.947*X[59]-16.947*X[60]-16.947*X[61]-16.947*X[62]-16.947*X[63]-16.947*X[64]-16.947*X[65]-16.947*X[66]-16.947*X[67]-16.947*X[68]-16.947*X[69]-16.947*X[70]-16.947*X[71]-16.947*X[72]-16.947*X[73]-16.947*X[74]-16.947*X[75]-16.947*X[76]-16.947*X[77]-16.947*X[78]-16.947*X[79]-16.947*X[80]-16.947*X[81]-16.947*X[82]-16.947*X[83]-16.947*X[84]-16.947*X[85]-16.947*X[86]-16.947*X[87]-16.947*X[88]-16.947*X[89]-16.947*X[90]-16.947*X[91]-16.947*X[92]-16.947*X[93]-16.947*X[94]-16.947*X[95]-16.947*X[96]-16.947*X[97]-16.947*X[98]-16.947*X[99]-16.947*X[100]-16.947*X[101]-16.947*X[102]-16.947*X[103]-16.947*X[104]-16.947*X[105]-16.947*X[106]-16.947*X[107]-16.947*X[108]-16.947*X[109]-16.947*X[110]-16.947*X[111]-16.947*X[112]-16.947*X[113]-16.947*X[114]-16.947*X[115]-16.947*X[116]-16.947*X[117]-16.947*X[118]-16.947*X[119]-16.947*X[120]-16.947*X[121]-16.947*X[122]-16.947*X[123]-16.947*X[124]-16.947*X[125]-16.947*X[126]-16.947*X[127]-16.947*X[128]-16.947*X[129]-16.947*X[130]-16.947*X[131]-16.947*X[132]-16.947*X[133]-16.947*X[134]-16.947*X[135]-16.947*X[136]-16.947*X[137]-16.947*X[138]-16.947*X[139]-16.947*X[140]-16.947*X[141]-16.947*X[142]-16.947*X[143]-16.947*X[144]-16.947*X[145]-16.947*X[146]-16.947*X[147]-16.947*X[148]-16.947*X[149]-16.947*X[150]-16.947*X[151]-16.947*X[152]-16.947*X[153]-16.947*X[154]-16.947*X[155]-16.947*X[156]-16.947*X[157]-16.947*X[158]-16.947*X[159]-16.947*X[160]-16.947*X[161]-16.947*X[162]-16.947*X[163]-16.947*X[164]-16.947*X[165]-16.947*X[166]-16.947*X[167]-16.947*X[168]-16.947*X[169]-16.947*X[170]-16.947*X[171]-16.947*X[172]-16.947*X[173]-16.947*X[174]-16.947*X[175]-16.947*X[176]-16.947*X[177]-16.947*X[178]-16.947*X[179]-16.947*X[180]-16.947*X[181]-16.947*X[182]-16.947*X[183]-16.947*X[184]-16.947*X[185]-16.947*X[186]-16.947*X[187]-16.947*X[188]-16.947*X[189]-16.947*X[190]-16.947*X[191]-16.947*X[192]-16.947*X[193]-16.947*X[194]-16.947*X[195]-16.947*X[196]-16.947*X[197]-16.947*X[198]-16.947*X[199]-16.947*X[200]-16.947*X[201]-16.947*X[202]-16.947*X[203]-16.947*X[204]-16.947*X[205]-16.947*X[206]-16.947*X[207]-16.947*X[208]-16.947*X[209]-16.947*X[210]-16.947*X[211]-16.947*X[212]-16.947*X[213]-16.947*X[214]-16.947*X[215]-16.947*X[216]-16.947*X[217]-16.947*X[218]-16.947*X[219]-16.947*X[220]-16.947*X[221]-16.947*X[222]-16.947*X[223]-16.947*X[224]-16.947*X[225]-16.947*X[226]-16.947*X[227]-16.947*X[228]-16.947*X[229]-16.947*X[230]-16.947*X[231]-16.947*X[232]-16.947*X[233]-16.947*X[234]-16.947*X[235]-16.947*X[236]-16.947*X[237]-16.947*X[238]-16.947*X[239]-16.947*X[240]-16.947*X[241]-16.947*X[242]-16.947*X[243]-16.947*X[244]-16.947*X[245]-16.947*X[246]-16.947*X[247]-16.947*X[248]-16.947*X[249]-16.947*X[250]-16.947*X[251]-16.947*X[252]-16.947*X[253]-16.947*X[254]-16.947*X[255]-16.947*X[256]-16.947*X[257]-16.947*X[258]-16.947*X[259]-16.947*X[260]-16.947*X[261]-16.947*X[262]-16.947*X[263]-16.947*X[264]-16.947*X[265]-16.947*X[266]-16.947*X[267]-16.947*X[268]-16.947*X[269]-16.947*X[270]-16.947*X[271]-16.947*X[272]-16.947*X[273]-16.947*X[274]-16.947*X[275]-16.947*X[276]-16.947*X[277]-16.947*X[278]-16.947*X[279]-16.947*X[280]-16.947*X[281]-16.947*X[282]-16.947*X[283]-16.947*X[284]-16.947*X[285]-16.947*X[286]-16.947*X[287]-16.947*X[288]-16.947*X[289]-16.947*X[290]-16.947*X[291]-16.947*X[292]-16.947*X[293]-16.947*X[294]-16.947*X[295]-16.947*X[296]-16.947*X[297]-16.947*X[298]-16.947*X[299]-16.947*X[300]-16.947*X[301]-16.947*X[302]-16.947*X[303]-16.947*X[304]-16.947*X[305]-16.947*X[306]-16.947*X[307]-16.947*X[308]-16.947*X[309]-16.947*X[310]-16.947*X[311]-16.947*X[312]
            end

operators = Dict{Operator,Integer}(UniformMutation() => 20,
                                BoundaryMutation() => 20,
                                NonUniformMutation() => 20,
                                WholeNonUniformMutation() => 20,
                                ArithmeticalCrossover() => 40,
                                SimpleCrossover() => 40,
                                HeuristicCrossover() => 40)


spec_dummy = GenocopSpecification(eval_func, equalities, equalities_right, inequalities, inequalities_right, lower_bounds, upper_bounds; max_iterations = 2, cumulative_prob_coeff = 0.018,
                        starting_population_type=single_point_start_pop, operator_mapping=operators, population_size=400, minmax = minimization, starting_point = starting_point, epsilon = 0.0)
end
spec = GenocopSpecification(eval_func, equalities, equalities_right, inequalities, inequalities_right, lower_bounds, upper_bounds; max_iterations = 6000, cumulative_prob_coeff = 0.018,
                        starting_population_type=single_point_start_pop, operator_mapping=operators, population_size=400, minmax = minimization, starting_point = starting_point, epsilon = 0.0)

genocop(spec_dummy)
best = @time genocop(spec)
#println("best: $best")
best_eval = eval_func(best)
println("best fitness: $best_eval")


# @profile genocop(spec_dummy)

# Profile.clear()
# Profile.init(10^7, 0.001)
# @profile (genocop(spec))
# using ProfileView
# ProfileView.view()

# readline(STDIN)


print("\n\n\n")

end

test()






