@everywhere using ParallelGenocop
@everywhere @Logging.configure(level=INFO)


function test()
###
println("gsg_0001 - netlib lp")


@everywhere begin

function loosen_it(plus_minus, parameter, vector)
	result = similar(vector)
	for i=1:length(vector)
		# if abs(vector[i]) < 1
			result[i] = plus_minus(vector[i], parameter)
		# else
		# 	result[i] = plus_minus(vector[i], abs(vector[i])*parameter)
		# end
	end
	return result
end

blas_set_num_threads(16)

lower_bounds = Float64[12.735,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf]
upper_bounds = Float64[12.735,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,0.1,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,0.2,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,0.01,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,0,400,400,400,400,400,400,400,400,400,400]

equalities = readdlm("gsg_0001_eq", Float64)
equalities_right = Float64[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]

inequalities = readdlm("gsg_0001_ineq", Float64)
inequalities_right = Float64[0.18523,0.2442,0.30729,0.41698,0.52802,0.65155,0.81675,0.98667,1.15501,1.33561,0.18523,0.2442,0.30729,0.41698,0.52802,0.65155,0.81675,0.98667,1.15501,1.33561,0.18523,0.2442,0.30729,0.41698,0.52802,0.65155,0.81675,0.98667,1.15501,1.33561,-12.735,-18.523,-24.42,-30.729,-41.698,-52.802,-65.155,-81.675,-98.667,-115.501,-133.561,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0]

# param = 2.0
# lower_bounds = loosen_it(-, param, lower_bounds)
# upper_bounds = loosen_it(+, param, upper_bounds)
# inequalities_right = loosen_it(+, param, inequalities_right)

starting_point = Float64[3084.099854, 0, 0, 0, 1726.528768, 3164.484825, 0, 0, 0, 2019.165349, 7681.848915, 5548.181502, 0, 0, 0, 28940.0, 25300.0, 25300.0, 0, 91.0, 61.0, 61.0, 23.0, 17.0, 17.0, 908.885652, 2197.54541, 2210.78975, 0, 0, 0, 12058.0, 10601.0, 10601.0, 0, 1673.708068, 2613.682008, 79.218321, 0, 0, 0, 0, 0.1, 0, 0, 0, 1.5, 2.846043, 3.390866, 0, 0.0001, 0, 0, 0, 0.0001, 0.0001, 0, 0, 25.481001, 15.103968, 57.367153, 0, 6.514, 0, 13.44085, 0, 0, 0, 0, 0, 0, 3.112, 2.48, 0, 0, 0, 0.0001, 0.0001, 0.0001, 0.0001, 0.3, 0, 0.001, 0, 0, 0, 0, 0, 0, 0, 458.0, 0, 119.639585, 0, 1571.165349, 2840.683566, 0, 0, 2951.650501, 0, 0, 0, 0, 0, 0.001, 836.623743, 0, 0, 296.829834, 0, 0, 0, 0, 0, 272.219844, 0, 0, 0, 0, 0, 0, 0, 0, 272.000418, 0, 0, 32.294534, 0, 0, 0.286624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1587.981619, 0, 0, 215.099805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 206.927834, 0, 0, 0, 0, 0, 0.09, 0, 0, 57.930301, 0, 0, 0, 0, 0, 0, 0, 0, 332.829834, 328.219971, 291.689941, 826.959961, 827.689941, 855.269775, 1084.833743, 150.0, 50.0, 126.78, 217.099854, 326.829834, 61.21, 30.0, 0, 616.079834, 626.849854, 634.919922, 38.95, 20.0, 282.219844, 24.79, 12.0, 6.0, 43.24, 22.0, 11.0, 507.170418, 307.32323, 59.0, 84.694534, 26.0, 13.0, 0.286624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 223.18, 218.49, 205.62, 30.689987, 15.0, 7.5, 61.37, 30.0, 15.0, 85.979867, 1630.981619, 0, 76.63, 38.0, 234.099805, 16.63, 8.0, 4.0, 0, 0, 0, 0, 6.3, 4.9, 4.2, 4.0, 2.0, 1.0, 7.70969, 3.768, 1.902, 34.019989, 17.0, 8.5, 157.73, 241.281893, 246.927834, 26.34, 13.0, 6.5, 0.09, 0, 0, 57.930301, 0, 0, 0, 0, 0, 0, 0, 0, 417.99, 413.799805, 418.579834, 8.32, 0, 0, 398.849922, 471.370117, 498.969971, 754.629883, 728.629883, 702.629883, 327.7, 338.5, 358.9, 0, 0, 555.0, 229.0, 153.0, 0, 0, 458.0, 0, 119.639585, 119.639585, 5659.165349, 7681.848915, 6864.848915, 728.0, 3533.650501, 3388.650501, 445.0, 356.0, 267.0, 0, 1300.793631, 0, 0, 81.914779, 589.357357, 17.862885, 0, 0, 0, 0, 0, 0, 0, 0, 64.748244, 0, 0, 0, 15.641926, 0, 0, 0, 0, 0, 0, 0, 0, 2603.216061, 0, 0, 1457.0, 0, 0, 3640.0, 0, 0, 0.001, 0, 0, 499.5, 206.1, 137.7, 0, 0, 412.2, 0, 119.639585, 0, 5659.165349, 7681.848915, 5548.181502, 0, 3533.650501, 895.75532, 31.877225, 0, 0, 0, 0, 42.133862, 0, 0, 23.841164, 23.841169, 71.523493, 3.376413, 3.376413, 10.129238, 0, 178.190673, 0, 193.709656, 193.709725, 581.129052, 186.833035, 186.833102, 560.499187, 54.589332, 0, 0, 0, 0, 65.467433, 63.090334, 0, 0, 0, 0, 23.523643, 19.995851, 19.995858, 59.987548, 15.591076, 15.591082, 46.773227, 10.730266, 0, 32.190796, 27.42656, 27.42657, 82.279675, 0, 0, 47.918297, 9.536, 4.392, 0.622, 35.288, 34.874, 33.635986, 25.481001, 40.58497, 97.952123, 12.355, 14.817, 14.279, 16.92785, 16.27885, 16.27885, 3.727, 3.727, 2.906, 2.0, 5.112, 7.592, 1.686, 1.686, 1.686, 0.0001, 0.0002, 0.0001, 0.0001, 1.3, 1.3, 1.301, 4.815279, 33.646889, 111.293559, 4.815279, 0, 0, 0, 4e-06, 0, 0, 0, 3e-05, 0, 1e-06, 0, 0, 0, 4e-06, 98.004621, 11.582151, 120.947746, 98.004621, 6.236524, 0, 0, 3.5e-05, 0, 0, 0, 0.000229, 0, 3.4e-05, 0, 0, 0, 0.000221, 28.388282, 24.689181, 0, 5.99325, 37.716035, 0, 85.817649, 64.269982, 109.947149, 51.782231, 21.977796, 25.455879, 101.117219, 86.807118, 184.458698, 207.121527, 131.765537, 133.973804, 6.238756, 43.593468, 0, 0, 14.827763, 0, 40.215679, 52.280407, 126.009154, 40.215679, 28.150981, 49.817591, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86.280204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19.995851, 19.995858, 36.463906, 0, 0, 0, 0, 0, 0, 0, 10.73027, 0, 0, 0, 0, 40.73209, 40.732105, 74.277964, 2.021984, 1.245118, 4.118463, 2.021984, 0.670448, 1.628229, 2.021984, 1.245118, 4.118463, 2.021984, 0.670448, 1.628229, 0, 0, 0, 0, 0, 0, 8.8e-05, 0.000115, 0.000312, 8.8e-05, 6.2e-05, 0.000123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.000211, 0.000275, 0.000909, 0.000211, 0.000148, 0.000359, 0, 0, 0, 0, 0, 0, 0, 0, 0]

eval_func = function(X::Vector{Float64})
                return - (15*(5*X[45])^(-0.1)*X[12] + 130*(100*X[56])^(-0.3)*X[23] + 30*X[12] + 30*X[23]+ 0.613913253540759*(15*(5*X[46])^(-0.1)*X[13] + 130*(100*X[57])^(-0.3)*X[24]+ 30*X[13] + 30*X[24]) + 0.376889482873*(15*(5*X[47])^(-0.1)*X[14] + 130*(100*X[58])^(-0.3)*X[25] + 30*X[14] + 30*X[25]) + 0.231377448655858*(15*(5*X[48])^(-0.1)*X[15] + 130*(100*X[59])^(-0.3)*X[26] + 30*X[15] + 30*X[26]) + 0.142045682300278*(15*(5*X[49])^(-0.1)*X[16] + 130*(100*X[60])^(-0.3)*X[27] + 30*X[16] + 30*X[27]) + 0.0872037269723804*(15*(5*X[50])^(-0.1)*X[17] + 130*(100*X[61])^(-0.3)*X[28] + 30*X[17] + 30*X[28]) + 0.0535355237464941*(15*(5*X[51])^(-0.1)*X[18] + 130*(100*X[62])^(-0.3)*X[29] + 30*X[18] + 30*X[29]) + 0.0328661675632188*(15*(5*X[52])^(-0.1)*X[19] + 130*(100*X[63])^(-0.3)*X[30]+ 30*X[19] + 30*X[30]) + 0.0201769758601514*(15*(5*X[53])^(-0.1)*X[20] + 130*(100*X[64])^(-0.3)*X[31] + 30*X[20] + 30*X[31]) + 0.0123869128969189*(15*(5*X[54])^(-0.1)*X[21] + 130*(100*X[65])^(-0.3)*X[32] + 30*X[21] + 30*X[32]) + 0.00760448999787347*(15*(5*X[55])^(-0.1)*X[22] + 130*(100*X[66])^(-0.3)*X[33]+ 30*X[22] + 30*X[33])) - 40*X[1] - 24.5565301416304*X[2] - 15.07557931492*X[3]- 9.25509794623431*X[4] - 5.6818272920111*X[5] - 3.48814907889522*X[6]- 2.14142094985976*X[7] - 1.31464670252875*X[8] - 0.807079034406055*X[9]- 0.495476515876756*X[10] - 0.304179599914939*X[11]
            end

operators = Dict{Operator,Integer}(UniformMutation() => 15,
                                BoundaryMutation() => 15,
                                NonUniformMutation() => 15,
                                WholeNonUniformMutation() => 15,
                                ArithmeticalCrossover() => 40,
                                SimpleCrossover() => 40,
                                HeuristicCrossover() => 40)


spec_dummy = GenocopSpecification(eval_func, equalities, equalities_right, inequalities, inequalities_right, lower_bounds, upper_bounds; max_iterations = 3,
                        starting_population_type=single_point_start_pop, minmax = minimization, starting_point = starting_point, epsilon = 1e-3)
end
spec = GenocopSpecification(eval_func, equalities, equalities_right, inequalities, inequalities_right, lower_bounds, upper_bounds; max_iterations = 6000,
                        starting_population_type=single_point_start_pop, operator_mapping=operators, population_size=400, minmax = maximization, epsilon = 0.0)

#genocop(spec_dummy)
best = @time genocop(spec)
#println("best: $best")
best_eval = eval_func(best)
println("best fitness: $best_eval")


# @profile genocop(spec_dummy)

# Profile.clear()
# Profile.init(10^7, 0.001)
# @profile (genocop(spec))
# using ProfileView
# ProfileView.view()

# readline(STDIN)


print("\n\n\n")

end

test()






